eg_id|question|query_example
1|Look up customer details using customer ID|MATCH (c:Customer {customerId: customerId passed in user question}) RETURN c ...
2|Orders placed by a customer.|MATCH (c:Customer {customerId: customerId passed in user question})<-[:orderedBy]-(o:Order) RETURN o ORDER BY o.orderDate ...
3|Products in a Order.|MATCH (o:Order {orderId: orderId passed in user question})-[:includesOrderLine]->()-[:refersToProduct]->(p:Product) RETURN p.productName, p.productId ...
4|Orders associated with a store. |MATCH (s:Store {storeName: storeName passed in user question})<-[:PLACED_AT]-(o:Order) RETURN o ...
5|Orders within a start and end date.|MATCH (o:Order) WHERE o.orderDate >= date(startDate passed in user question) AND o.orderDate < date(endDate passed in user question) RETURN o ...
6|Category of a product.|MATCH (p:Product {productId: productId passed in user question})-[:BELONGS_TO_CATEGORY]->(c:Category) RETURN c.categoryName ...
7|Inventory levels for a product at a store. |MATCH (s:Store {storeName: storeName passed in user question})-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product {productId: productId passed in user question}) RETURN inv.initialStock, inv.finalStock ... 
8|Product returns for a store. |MATCH (s:Store {storeName: storeName passed in user question})<-[:PROCESSED_AT]-(r:Return) RETURN r ...
9|Supplier for a given product. |MATCH (sup:Supplier)-[:SUPPLIES]->(p:Product {productId: productId passed in user question}) RETURN sup.name ...
10|Orders where a promotion code was applied. |MATCH (promo:Promotion {promoId: promoId passed in user question})<-[:HAS_PROMOTION]-(o:Order) RETURN o ...
11|Customers of a age group who ordered from a store. |MATCH (c:Customer {ageGroup: ageGroup passed in user question})<-[:orderedBy]-(:Order)-[:PLACED_AT]->(s:Store {storeName: storeName passed in user question}) RETURN DISTINCT c ...
12|List products that were included in orders using a promotion ID. |MATCH (promo:Promotion {promoId: promoId passed in user question})<-[:HAS_PROMOTION]-(o:Order)-[:includesOrderLine]->()-[:refersToProduct]->(p:Product) RETURN DISTINCT p ...
13|Show product categories provided by a named supplier. |MATCH (sup:Supplier {name: supplierName passed in user question})-[:SUPPLIES]->(:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category) RETURN DISTINCT cat.categoryName ...
14|What are the return reasons for orders placed during a season? |MATCH (ret:Return)-[:RETURNED_FROM]->(o:Order: {season: season passed in user question}) RETURN DISTINCT ret.reason, count(*) ... 
15|Identify customers belonging to a certain loyalty tier and living in a location type. |MATCH (c:Customer {loyaltyTier: loyaltyTier passed in user question, location: locationType passed in user question}) RETURN c.customerId, c.name ...
16|Pattern to count the number of orders each customer placed at a store. |MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: storeName passed in user question}) WITH c, count(o) AS orderCount RETURN c.customerId, orderCount ... 
17|Structure to calculate average order line total amount per category for a date range. |MATCH (o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->()-[:BELONGS_TO_CATEGORY]->(c:Category) WHERE o.orderDate >= date(startDate passed in user question) AND o.orderDate < date(endDate passed in user question) WITH c.categoryName AS category, AVG(ol.totalAmount) AS avgLineAmount RETURN category, avgLineAmount ...
18|Find products involved in returns made by a customer ID. |MATCH (c:Customer {customerId: customerId passed in user question})<-[:RETURNED_BY]-(:Return)-[:RETURNED_LINE]->()-[:refersToProduct]->(p:Product) RETURN DISTINCT p ...
19|List products featured on planograms of a certain layout type. |MATCH (pl:Planogram {layoutType: layoutType passed in user question})-[:DISPLAYS]->(p:Product) RETURN DISTINCT p.productName ...
20|Calculate total revenue generated from different customer age groups during a holiday. |MATCH (c:Customer)<-[:orderedBy]-(o:Order {holiday: holiday passed in user question})-[:includesOrderLine]->(ol:OrderLine) WITH c.ageGroup AS ageGroup, SUM(ol.totalAmount) AS totalRevenue RETURN ageGroup, totalRevenue ...
21|Find orders matching customer age group, store name, and date range filters.|MATCH (c:Customer {ageGroup: ageGroup passed in user question})<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: storeName passed in user question}) WHERE o.orderDate >= date(startDate passed in user question) AND o.orderDate < date(endDate passed in user question) RETURN o ...
22|Get supplier names for products belonging to a category. |MATCH (sup:Supplier)-[:SUPPLIES]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category {categoryName: categoryName passed in user question}) RETURN sup.name, p.productName ...
23|Identify promotions applied to orders placed by customers having traits.|MATCH (c:Customer {traits: trait passed in user question})<-[:orderedBy]-(o:Order)-[:HAS_PROMOTION]->(promo:Promotion) RETURN DISTINCT promo.name ...
24|Pattern to count the number of distinct products per category available in a store's inventory.|MATCH (s:Store {storeName: storeName passed in user question})-[:HAS_INVENTORY]->()-[:TRACKS_PRODUCT]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) WITH s.storeName, c.categoryName, COUNT(DISTINCT p) AS productCount RETURN ...
25|Find customers who returned products from orders placed during a holiday. |MATCH (c:Customer)<-[:RETURNED_BY]-(:Return)-[:RETURNED_FROM]->(o:Order {holiday: holiday passed in user question}) RETURN DISTINCT c ...
26|Structure to calculate the average product price for each brand within a given category, based on order lines. |MATCH (cat:Category {categoryName: categoryName passed in user question})<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(ol:OrderLine) WITH p.brand AS brand, AVG(ol.productPrice) AS avgPrice RETURN brand, avgPrice ...
27|Identify stores where customers belonging to a high loyalty tier have placed orders. |MATCH (c:Customer {loyaltyTier: highTier passed in user question})<-[:orderedBy]-(:Order)-[:PLACED_AT]->(s:Store) RETURN DISTINCT s.storeName ... 
28|Pattern to count orders grouped by customer occupation and the season the order was placed.| MATCH (c:Customer)<-[:orderedBy]-(o:Order) WITH c.occupation AS occupation, o.season AS season, COUNT(o) AS orderCount RETURN occupation, season, orderCount ...
29|List products that are part of an assortment plan for a season.|MATCH (ap:AssortmentPlan {season: season passed in user question})-[:INCLUDES]->(p:Product) RETURN p.productName ...
30|Find inventory GMROI for products displayed on a planogram layout type at a store.|MATCH (s:Store {storeName: storeName passed in user question})-[:USES_PLANOGRAM]->(pl:Planogram {layoutType: layoutType passed in user question})-[:DISPLAYS]->(p:Product) MATCH (s)-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p) WITH p.productName, inv.gmroi RETURN ...
31|Find orders placed by a customer at a store.|MATCH (c:Customer {customerId: customerId passed in user question})<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: storeName passed in user question}) RETURN o ...
32|Find orders placed by customers in a age group at a store.|MATCH (c:Customer {ageGroup: ageGroup passed in user question})<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: storeName passed in user question}) RETURN o ...
33|Retrieve orders associated with a store. |MATCH (s:Store {storeName: storeName passed in user question})<-[:PLACED_AT]-(o:Order) RETURN o ...
34|Categories for products within orders. |MATCH (o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) RETURN o.orderId, c.categoryName ...
35|Categories for Products within orders.|MATCH (o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) RETURN o.orderId, c.categoryName ...
36|List products of a category included in orders using a promotion ID.|MATCH (promo:Promotion {promoId: promoId passed in user question})<-[:HAS_PROMOTION]-(:Order)-[:includesOrderLine]->()-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category {categoryName: categoryName passed in user question}) RETURN DISTINCT p ...
37|What are the return reasons for products in a category ordered during a season?|MATCH (ret:Return)-[:RETURNED_LINE]->()-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category {categoryName: categoryName passed in user question}) MATCH (ret)-[:RETURNED_FROM]->(o:Order {season: season passed in user question}) RETURN DISTINCT ret.reason, count(*) ...
38|Calculate average quantity per order line for each brand within a category during a date range.|MATCH (cat:Category {categoryName: categoryName passed in user question})<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(ol:OrderLine)<-[:includesOrderLine]-(o:Order) WHERE o.orderDate >= date(startDate passed in user question) AND o.orderDate < date(endDate passed in user question) WITH p.brand AS brand, AVG(ol.orderLineQuantity) AS avgQty RETURN brand, avgQty ...
39|Customers who returned a product that was processed at a store.|MATCH (c:Customer)<-[:RETURNED_BY]-(r:Return)-[:PROCESSED_AT]->(s:Store {storeName: storeName passed in user question}) MATCH (r)-[:RETURNED_LINE]->()-[:refersToProduct]->(p:Product {productId: productId passed in user question}) RETURN DISTINCT c ...
40|Calculate total revenue from holiday orders, grouped by customer lifestyle.|MATCH (c:Customer)<-[:orderedBy]-(o:Order {holiday: holiday passed in user question})-[:includesOrderLine]->(ol:OrderLine) WITH c.lifestyle AS lifestyle, SUM(ol.totalAmount) AS totalRevenue RETURN lifestyle, totalRevenue ...
41|Products supplied by suppliers with a high rating.|MATCH (sup:Supplier)-[:SUPPLIES]->(p:Product) WHERE sup.rating >= minRating passed in user question RETURN p.productName, sup.name, sup.rating ...
42|Orders that used a promotion during a particular season.|MATCH (promo:Promotion {promoId: promoId passed in user question})<-[:HAS_PROMOTION]-(o:Order {season: season passed in user question}) RETURN o.orderId ...
43|Customers with a location type and lifestyle who purchased product from a given category.|MATCH (c:Customer {location: locationType passed in user question, lifestyle: lifestyle passed in user question})<-[:orderedBy]-(:Order)-[:includesOrderLine]->()-[:refersToProduct]->(:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category {categoryName: categoryName passed in user question}) RETURN DISTINCT c ...
44|Which stores have inventory for products of a brand?|MATCH (s:Store)-[:HAS_INVENTORY]->()-[:TRACKS_PRODUCT]->(p:Product {brand: brand passed in user question}) RETURN DISTINCT s.storeName ...
45|Total sales revenue for each customer segment.|MATCH (c:Customer)<-[:orderedBy]-(:Order)-[:includesOrderLine]->(ol:OrderLine) WITH c.segment AS segment, SUM(ol.totalAmount) AS totalRevenue RETURN segment, totalRevenue ORDER BY totalRevenue DESC...
46|Total revenue generated during a quarter and year.|MATCH (o:Order)-[:includesOrderLine]->(ol:OrderLine) WHERE o.orderDate >= date(startDate passed in user question) AND o.orderDate < date(endDate passed in user question) RETURN SUM(ol.totalAmount) AS totalQuarterlyRevenue ...
47|Top N products generating the most sales and revenue.|MATCH (ol:OrderLine)-[:refersToProduct]->(p:Product) WITH p.productName AS product, SUM(ol.totalAmount) AS productRevenue RETURN product, productRevenue ORDER BY productRevenue DESC LIMIT n ...
48|Bottom N stores with the lowest total sales amount.|MATCH (s:Store)<-[:PLACED_AT]-(:Order)-[:includesOrderLine]->(ol:OrderLine) WITH s.storeName AS store, SUM(ol.totalAmount) AS totalSales RETURN store, totalSales ORDER BY totalSales ASC LIMIT n ...
49|Top N customers who generated the most revenue in a quarter.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:includesOrderLine]->(ol:OrderLine) WHERE o.orderDate >= date(startDate passed in user question) AND o.orderDate < date(endDate passed in user question) WITH c.customerId AS customerId, SUM(ol.totalAmount) AS totalRevenue RETURN customerId, totalRevenue ORDER BY totalRevenue DESC LIMIT n passed in user question ...
50|Calculate the similarity for shared products and the size of the total unique set of products.|WITH sharedCount AS sharedCount, totalSetSize AS totalSetSize WITH toFloat(sharedCount) / totalSetSize AS jaccardSimilarity RETURN jaccardSimilarity ...
51|Customer similarity, including example of a shared product.|WITH clauses WITH c1, c2, sharedCount, jaccardSimilarity, sharedProducts RETURN c1.name, c2.name, sharedCount, round(jaccardSimilarity * 100) AS similarityPercentage, head([prod IN sharedProducts prod.productName]) AS exampleSharedProduct ORDER BY similarityPercentage DESC LIMIT n ...
52|Calculate total sales revenue per customer segment.|MATCH (c:Customer)<-[:orderedBy]-(:Order)-[:includesOrderLine]->(ol:OrderLine) WHERE c.segment = segment from the users query ... Needs further processing: WITH c.segment, SUM(ol.totalAmount)...
53|total revenue for orders in a specific Quarter|MATCH (o:Order)-[:includesOrderLine]->(ol:OrderLine) WHERE o.orderDate >= date(startDate from the users query) AND o.orderDate < date(endDate from the users query)...Needs further processing: RETURN SUM(ol.totalAmount)...
54|Identify the Top N products by sales revenue.|MATCH (ol:OrderLine)-[:refersToProduct]->(p:Product) Needs further processing: WITH p, SUM(ol.totalAmount) ORDER BY... LIMIT n...
55|Find the Bottom N stores based on total sales volume.|MATCH (s:Store)<-[:PLACED_AT]-(:Order)-[:includesOrderLine]->(ol:OrderLine).. Needs further processing: WITH s, SUM(ol.totalAmount) ORDER BY... ASC LIMIT n...
56|Find products frequently ordered by a specific customer segment.|MATCH (c:Customer {segment: segment from the users query})<-[:orderedBy]-(:Order)-[:includesOrderLine]->()-[:refersToProduct]->(p:Product)...Needs further processing: WITH p, COUNT(DISTINCT c)...
57|Calculate total sales for a specific customer segment within a given Quarter.|MATCH (c:Customer {segment: segment from the users query})<-[:orderedBy]-(o:Order)-[:includesOrderLine]->(ol:OrderLine) WHERE o.orderDate >= date(startDate from the users query) AND o.orderDate < date(endDate from the users query) ...Needs further processing: RETURN SUM(ol.totalAmount)...
58|Find the Top N categories by sales revenue for a specific customer segment.|MATCH (c:Customer {segment:segment from the users query})<-[:orderedBy]-(:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category)...Needs further processing: WITH cat, SUM(ol.totalAmount)... ORDER BY... DESC LIMIT n...
59|Find the Top N customers by revenue in a specific Quarter.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:includesOrderLine]->(ol:OrderLine) WHERE o.orderDate >= date(startDate from the users query) AND o.orderDate < date(endDate from the users query)...Needs further processing: WITH c, SUM(ol.totalAmount) ORDER BY... DESC LIMIT n...
60|Find all promotions active during Summer.|MATCH (p:Promotion) WHERE p.startDate <= date('2023-06-01') AND p.endDate >= date('2023-08-31') RETURN p
61|List products available in a planogram at Uppsala store.|MATCH (s:Store {storeName: 'Uppsala'})-[:USES_PLANOGRAM]->(pl:Planogram)-[:DISPLAYS]->(p:Product) RETURN p.productName
62|Show suppliers who supply products with color Black.|MATCH (sup:Supplier)-[:SUPPLIES]->(p:Product {color: 'Black'}) RETURN DISTINCT sup.name
63|Find returns processed at Stockholm store during Christmas.|MATCH (s:Store {storeName: 'Stockholm'})<-[:PROCESSED_AT]-(r:Return) WHERE r.returnDate >= date('2023-12-01') AND r.returnDate <= date('2023-12-31') RETURN r
64|Customers who returned more than 3 items.|MATCH (c:Customer)<-[:RETURNED_BY]-(r:Return) WITH c, sum(r.quantity) AS totalReturned WHERE totalReturned > 3 RETURN c.name, totalReturned
65|Find order lines related to H&M brand products.|MATCH (ol:OrderLine)-[:refersToProduct]->(p:Product {brand: 'H&M'}) RETURN ol
66|Which store has the highest final stock of products with color Black?|MATCH (s:Store)-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product {color: 'Black'}) RETURN s.storeName, sum(inv.finalStock) AS totalStock ORDER BY totalStock DESC LIMIT 1
67|List forecasts with highest variance.|MATCH (f:Forecast) RETURN f ORDER BY abs(f.variance) DESC LIMIT 5
68|Find products targeted in Spring Assortment Plans.|MATCH (ap:AssortmentPlan {season: 'Spring'})-[:INCLUDES]->(p:Product) RETURN p.productName
69|List all customers in Platinum loyalty tier.|MATCH (c:Customer {loyaltyTier: 'Platinum'}) RETURN c.name
70|Products with inventory stock less than 10 units.|MATCH (inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) WHERE inv.finalStock < 10 RETURN p.productName, inv.finalStock
71|Top 5 products by forecasted quantity in Malmö store.|MATCH (s:Store {storeName: 'Malmö'})-[:FORECASTED_FOR]->(f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product) RETURN p.productName, f.forecastQty ORDER BY f.forecastQty DESC LIMIT 5
72|Find orders placed during high traffic periods.|MATCH (o:Order {trafficPeriod: 'High'}) RETURN o
73|What categories are included in Summer assortment plans?|MATCH (ap:AssortmentPlan {season: 'Summer'})-[:TARGETS_CATEGORY]->(c:Category) RETURN DISTINCT c.categoryName
74|Which products are being promoted during the holiday of Walpurgis Night?|MATCH (o:Order {holiday: 'Walpurgis Night'})-[:HAS_PROMOTION]->(promo:Promotion) WITH DISTINCT promo MATCH (promo)<-[:HAS_PROMOTION]-(o2:Order)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
75|Find products that have been returned the most.|MATCH (r:Return)-[:RETURNED_LINE]->(ol:OrderLine)-[:refersToProduct]->(p:Product) RETURN p.productName, sum(r.quantity) AS totalReturns ORDER BY totalReturns DESC LIMIT 5
76|Customers with highest total purchase amount.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:includesOrderLine]->(ol:OrderLine) RETURN c.name, sum(ol.totalAmount) AS totalSpent ORDER BY totalSpent DESC LIMIT 5
77|Stores with highest number of returns processed.|MATCH (s:Store)<-[:PROCESSED_AT]-(r:Return) RETURN s.storeName, count(r) AS returnCount ORDER BY returnCount DESC
78|Find customer orders during Easter holiday.|MATCH (c:Customer)<-[:orderedBy]-(o:Order {holiday: 'Easter'}) RETURN c.name, o.orderId
79|List products supplied by suppliers rated 5 stars.|MATCH (sup:Supplier {rating: 5})-[:SUPPLIES]->(p:Product) RETURN DISTINCT p.productName
80|List customers interested in Fashion and have a lifestyle of Trendy.|MATCH (c:Customer) WHERE 'Fashion' IN c.interests AND c.lifestyle = 'Trendy' RETURN c.name
81|Find orders placed at Gothenburg store during Winter.|MATCH (s:Store {storeName: 'Gothenburg'})<-[:PLACED_AT]-(o:Order {season: 'Winter'}) RETURN o.orderId
82|How many products are forecasted per store?|MATCH (s:Store)-[:FORECASTED_FOR]->(f:Forecast) RETURN s.storeName, count(DISTINCT f) AS forecastedProducts
83|Customers who made purchases in the Suburban areas location.|MATCH (c:Customer {location: 'Suburban'})<-[:orderedBy]-(o:Order) RETURN DISTINCT c.name
84|Products that belong to the 'Jeans' category.|MATCH (p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category {categoryName: 'Jeans'}) RETURN p.productName
85|Returns made by customers in Young Adult life stage.|MATCH (c:Customer {lifeStage: 'Young Adult'})<-[:RETURNED_BY]-(r:Return) RETURN c.name, r.returnId
86|Find suppliers providing COS brand products.|MATCH (sup:Supplier)-[:SUPPLIES]->(p:Product {brand: 'COS'}) RETURN DISTINCT sup.name
87|List orders that applied a promotion.|MATCH (o:Order)-[:HAS_PROMOTION]->(promo:Promotion) RETURN o.orderId, promo.name
88|Which categories are most frequently targeted in assortment plans?|MATCH (ap:AssortmentPlan)-[:TARGETS_CATEGORY]->(c:Category) RETURN c.categoryName, count(*) AS freq ORDER BY freq DESC
89|Show all products displayed in Planograms with 'Grid' layout type.|MATCH (pl:Planogram {layoutType: 'Grid'})-[:DISPLAYS]->(p:Product) RETURN p.productName
90|Top 5 stores by number of products displayed in their Planograms.|MATCH (s:Store)-[:USES_PLANOGRAM]->(pl:Planogram)-[:DISPLAYS]->(p:Product) RETURN s.storeName, count(p) AS productCount ORDER BY productCount DESC LIMIT 5
91|Customers who belong to Gold loyalty tier and have 'Tech' interests.|MATCH (c:Customer {loyaltyTier: 'Gold'}) WHERE 'Tech' IN c.interests RETURN c.name
92|Products forecasted incorrectly by more than 20% variance.|MATCH (f:Forecast) WHERE abs(f.variance) > 20 RETURN f.forecastId, f.productId, f.variance
93|Find products returned due to reason Defective.|MATCH (r:Return {reason: 'Defective'})-[:RETURNED_LINE]->(ol:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
94|Orders that included products of color Red.|MATCH (o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product {color: 'Red'}) RETURN DISTINCT o.orderId
95|List customers with family size greater than 4.|MATCH (c:Customer) WHERE c.familySize > 4 RETURN c.name
96|Suppliers with contract costs below 5000.|MATCH (sup:Supplier) WHERE sup.contractCost < 5000 RETURN sup.name
97|Stores with more than 1000 initial stock units across products.|MATCH (s:Store)-[:HAS_INVENTORY]->(inv:Inventory) WITH s, sum(inv.initialStock) AS totalStock WHERE totalStock > 1000 RETURN s.storeName, totalStock
98|Top 3 products by GMROI across all stores.|MATCH (inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) RETURN p.productName, avg(inv.gmroi) AS avgGmroi ORDER BY avgGmroi DESC LIMIT 3
99|Customers who returned products and received refund above $50.|MATCH (c:Customer)<-[:RETURNED_BY]-(r:Return) WHERE r.refundAmount > 50 RETURN DISTINCT c.name
100|Find the initial and final stock for Black jackets in Stockholm store.|MATCH (s:Store {storeName: 'Stockholm'})-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product {color: 'Black', category: 'Jackets'}) RETURN p.productName, inv.initialStock, inv.finalStock
101|Which stores have inventory stock below 50 for Green products?|MATCH (s:Store)-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product {color: 'Green'}) WHERE inv.finalStock < 50 RETURN s.storeName, p.productName, inv.finalStock
102|List all products whose GMROI is below 0.8.|MATCH (inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) WHERE inv.gmroi < 0.8 RETURN p.productName, inv.gmroi
103|Total inventory units across all stores for COS brand products.|MATCH (inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product {brand: 'COS'}) RETURN sum(inv.finalStock) AS totalUnits
104|Stores with the highest number of distinct products in inventory.|MATCH (s:Store)-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) RETURN s.storeName, count(DISTINCT p.productId) AS productCount ORDER BY productCount DESC
105|Find stores with inventory where initial stock is more than 500 units for any product.|MATCH (s:Store)-[:HAS_INVENTORY]->(inv:Inventory) WHERE inv.initialStock > 500 RETURN DISTINCT s.storeName
106|List products tracked in inventory for Malmö store.|MATCH (s:Store {storeName: 'Malmö'})-[:HAS_INVENTORY]->(inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) RETURN DISTINCT p.productName
107|Find products with the largest stock reduction between initial and final stock.|MATCH (inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) WITH p, (inv.initialStock - inv.finalStock) AS stockDrop RETURN p.productName, stockDrop ORDER BY stockDrop DESC LIMIT 5
108|Average GMROI for each store.|MATCH (s:Store)-[:HAS_INVENTORY]->(inv:Inventory) RETURN s.storeName, avg(inv.gmroi) AS avgGmroi ORDER BY avgGmroi DESC
109|Identify products that have zero final stock across all stores.|MATCH (inv:Inventory)-[:TRACKS_PRODUCT]->(p:Product) WHERE inv.finalStock = 0 RETURN DISTINCT p.productName
110|Find all products displayed in planograms used by Uppsala store.|MATCH (s:Store {storeName: 'Uppsala'})-[:USES_PLANOGRAM]->(pl:Planogram)-[:DISPLAYS]->(p:Product) RETURN DISTINCT p.productName
111|Which stores are using a planogram with a 'Zigzag' layout type?|MATCH (s:Store)-[:USES_PLANOGRAM]->(pl:Planogram {layoutType: 'Zigzag'}) RETURN DISTINCT s.storeName
112|List all planograms effective after January 1, 2024.|MATCH (pl:Planogram) WHERE pl.effectiveDate > date('2024-01-01') RETURN pl.planogramId, pl.effectiveDate
113|Products that appear in multiple planograms across different stores.|MATCH (pl:Planogram)-[:DISPLAYS]->(p:Product) WITH p, count(DISTINCT pl) AS plans WHERE plans > 1 RETURN p.productName, plans
114|Find stores that use more than 2 different planograms.|MATCH (s:Store)-[:USES_PLANOGRAM]->(pl:Planogram) WITH s, count(DISTINCT pl) AS planogramCount WHERE planogramCount > 2 RETURN s.storeName, planogramCount
115|What is the most common layout type used in planograms?|MATCH (pl:Planogram) RETURN pl.layoutType, count(*) AS usageCount ORDER BY usageCount DESC LIMIT 1
116|Products displayed in planograms with 'Grid' layout type.|MATCH (pl:Planogram {layoutType: 'Grid'})-[:DISPLAYS]->(p:Product) RETURN DISTINCT p.productName
117|Which planograms have the earliest effective dates?|MATCH (pl:Planogram) RETURN pl.planogramId, pl.effectiveDate ORDER BY pl.effectiveDate ASC LIMIT 5
118|List products displayed in planograms used by Stockholm and Malmö stores.|MATCH (s:Store)-[:USES_PLANOGRAM]->(pl:Planogram)-[:DISPLAYS]->(p:Product) WHERE s.storeName IN ['Stockholm', 'Malmö'] RETURN DISTINCT p.productName, s.storeName
119|Find how many products are displayed per planogram.|MATCH (pl:Planogram)-[:DISPLAYS]->(p:Product) RETURN pl.planogramId, count(DISTINCT p.productId) AS productCount ORDER BY productCount DESC
120|Find all products included in Spring 2024 assortment plans.|MATCH (ap:AssortmentPlan {season: 'Spring'})-[:INCLUDES]->(p:Product) RETURN DISTINCT p.productName
121|List all categories targeted in Winter assortment plans.|MATCH (ap:AssortmentPlan {season: 'Winter'})-[:TARGETS_CATEGORY]->(c:Category) RETURN DISTINCT c.categoryName
122|Which assortment plans were created by the user 'planner01'?|MATCH (ap:AssortmentPlan {createdBy: 'planner01'}) RETURN ap.planId, ap.season
123|Find products included in assortment plans created after June 1, 2023.|MATCH (ap:AssortmentPlan) WHERE ap.date > date('2023-06-01') MATCH (ap)-[:INCLUDES]->(p:Product) RETURN DISTINCT p.productName
124|How many products are included per assortment plan?|MATCH (ap:AssortmentPlan)-[:INCLUDES]->(p:Product) RETURN ap.planId, count(DISTINCT p.productId) AS productCount ORDER BY productCount DESC
125|Which assortment plans target the 'Jeans' category?|MATCH (ap:AssortmentPlan)-[:TARGETS_CATEGORY]->(c:Category {categoryName: 'Jeans'}) RETURN DISTINCT ap.planId
126|Find categories targeted by assortment plans created for Summer season.|MATCH (ap:AssortmentPlan {season: 'Summer'})-[:TARGETS_CATEGORY]->(c:Category) RETURN DISTINCT c.categoryName
127|List all assortment plans created before January 1, 2023.|MATCH (ap:AssortmentPlan) WHERE ap.date < date('2023-01-01') RETURN ap.planId, ap.season
128|Products included in multiple different assortment plans.|MATCH (ap:AssortmentPlan)-[:INCLUDES]->(p:Product) WITH p, count(DISTINCT ap) AS planCount WHERE planCount > 1 RETURN p.productName, planCount
129|Find assortment plans targeting both 'Jackets' and 'Sweater' categories.|MATCH (ap:AssortmentPlan)-[:TARGETS_CATEGORY]->(c:Category) WHERE c.categoryName IN ['Jackets', 'Sweater'] WITH ap, collect(DISTINCT c.categoryName) AS categories WHERE all(x IN ['Jackets', 'Sweater'] WHERE x IN categories) RETURN DISTINCT ap.planId
130|Find all products bought by customers aged 25-34 at Stockholm store during 2023.|MATCH (c:Customer {ageGroup: '25-34'})<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'})-[:USES_PLANOGRAM]->() WHERE o.orderDate >= date('2023-01-01') AND o.orderDate < date('2024-01-01') MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
131|Customers who bought Jackets from Gothenburg store during Summer 2023.|MATCH (c:Customer)<-[:orderedBy]-(o:Order {season: 'Summer'})-[:PLACED_AT]->(s:Store {storeName: 'Gothenburg'})-[:USES_PLANOGRAM]->() MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category {categoryName: 'Jackets'}) RETURN DISTINCT c.name
132|Total quantity of COS brand products sold in Uppsala store in Q2 2023.|MATCH (s:Store {storeName: 'Uppsala'})<-[:PLACED_AT]-(o:Order) WHERE o.orderDate >= date('2023-04-01') AND o.orderDate < date('2023-07-01') MATCH (o)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product {brand: 'COS'}) RETURN sum(ol.orderLineQuantity) AS totalUnits
133|Categories most purchased by Platinum loyalty customers during Christmas.|MATCH (c:Customer {loyaltyTier: 'Platinum'})<-[:orderedBy]-(o:Order {holiday: 'Christmas'})-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category) RETURN cat.categoryName, count(*) AS purchaseCount ORDER BY purchaseCount DESC
134|Top 5 customers by spending in Stockholm store in 2023.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'}) WHERE o.orderDate >= date('2023-01-01') AND o.orderDate < date('2024-01-01') MATCH (o)-[:includesOrderLine]->(ol:OrderLine) RETURN c.name, sum(ol.totalAmount) AS totalSpent ORDER BY totalSpent DESC LIMIT 5
135|Products bought by Rural customers from Malmö store during Midsummer.|MATCH (c:Customer {location: 'Rural'})<-[:orderedBy]-(o:Order {holiday: 'Midsummer'})-[:PLACED_AT]->(s:Store {storeName: 'Malmö'}) MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
136|Number of orders placed at Örebro store by customers aged 18-24 in Autumn.|MATCH (c:Customer {ageGroup: '18-24'})<-[:orderedBy]-(o:Order {season: 'Autumn'})-[:PLACED_AT]->(s:Store {storeName: 'Örebro'}) RETURN count(DISTINCT o.orderId) AS orderCount
137|Find average order amount for customers in Suburban areas shopping at Uppsala store.|MATCH (c:Customer {location: 'Suburban'})<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) MATCH (o)-[:includesOrderLine]->(ol:OrderLine) RETURN avg(ol.totalAmount) AS avgOrderAmount
138|List customers who purchased Fashion-related products from Malmö store.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Malmö'}) MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) WHERE 'Fashion' IN c.interests RETURN DISTINCT c.name
139|Top selling product categories in Gothenburg store during High traffic periods.|MATCH (o:Order {trafficPeriod: 'High'})-[:PLACED_AT]->(s:Store {storeName: 'Gothenburg'})-[:USES_PLANOGRAM]->() MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category) RETURN cat.categoryName, count(*) AS totalSales ORDER BY totalSales DESC
140|Find customers who bought Weekday brand products during Easter.|MATCH (c:Customer)<-[:orderedBy]-(o:Order {holiday: 'Easter'})-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product {brand: 'Weekday'}) RETURN DISTINCT c.name
141|What products were sold at Uppsala store in Spring 2023?|MATCH (s:Store {storeName: 'Uppsala'})<-[:PLACED_AT]-(o:Order {season: 'Spring'})-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
142|Customers who bought Black colored products at Stockholm during Q4.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'}) WHERE o.orderDate >= date('2023-10-01') AND o.orderDate < date('2024-01-01') MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product {color: 'Black'}) RETURN DISTINCT c.name
143|Total revenue generated by COS brand products at Gothenburg store.|MATCH (s:Store {storeName: 'Gothenburg'})<-[:PLACED_AT]-(o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product {brand: 'COS'}) RETURN sum(ol.totalAmount) AS totalRevenue
144|Products bought by customers in High Income segment at Örebro store.|MATCH (c:Customer {incomeLevel: 'High'})<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Örebro'}) MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
145|Which categories were sold most to Teen customers during Christmas?|MATCH (c:Customer {lifeStage: 'Teen'})<-[:orderedBy]-(o:Order {holiday: 'Christmas'})-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category) RETURN cat.categoryName, count(*) AS soldCount ORDER BY soldCount DESC
146|Average quantity of OrderLines per order placed at Malmö store during Summer.|MATCH (s:Store {storeName: 'Malmö'})<-[:PLACED_AT]-(o:Order {season: 'Summer'})-[:includesOrderLine]->(ol:OrderLine) RETURN avg(ol.orderLineQuantity) AS avgQuantity
147|Customers who placed orders at Uppsala store during Low traffic periods.|MATCH (c:Customer)<-[:orderedBy]-(o:Order {trafficPeriod: 'Low'})-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) RETURN DISTINCT c.name
148|Products purchased by customers with interests in Tech from Stockholm store.|MATCH (c:Customer) WHERE 'Tech' IN c.interests MATCH (c)<-[:orderedBy]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'}) MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product) RETURN DISTINCT p.productName
149|Categories most purchased by customers aged 35-44 at Malmö store during Easter.|MATCH (c:Customer {ageGroup: '35-44'})<-[:orderedBy]-(o:Order {holiday: 'Easter'})-[:PLACED_AT]->(s:Store {storeName: 'Malmö'})-[:USES_PLANOGRAM]->() MATCH (o)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)-[:BELONGS_TO_CATEGORY]->(cat:Category) RETURN cat.categoryName, count(*) AS purchaseCount ORDER BY purchaseCount DESC
150|Match customers who ordered the same product.|MATCH (c1:Customer)<-[:orderedBy]-(o1:Order)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o2:Order)-[:orderedBy]->(c2:Customer) WHERE c1 <> c2 RETURN DISTINCT c1.name, c2.name, p.productName
151|Find orders placed at the Uppsala store.|MATCH (o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) RETURN o.orderId, o.orderDate
152|Find orders placed during February 2023.|MATCH (o:Order) WHERE o.orderDate >= date('2023-02-01') AND o.orderDate <= date('2023-02-28') RETURN o.orderId
153|List products bought by a customer in February 2023 at Uppsala store.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product), (o)-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) WHERE o.orderDate >= date('2023-02-01') AND o.orderDate <= date('2023-02-28') RETURN DISTINCT p.productName
154|Find number of shared products between two customers.|MATCH (c1:Customer)<-[:orderedBy]-(o1:Order)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o2:Order)-[:orderedBy]->(c2:Customer) WHERE c1 <> c2 RETURN c1.name, c2.name, count(DISTINCT p) AS sharedProductCount
155|Collect products bought by a customer at Uppsala store in February 2023.|MATCH (c:Customer)<-[:orderedBy]-(o:Order)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product), (o)-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) WHERE o.orderDate >= date('2023-02-01') AND o.orderDate <= date('2023-02-28') RETURN collect(DISTINCT p) AS productsBought
156|Calculate Jaccard similarity between two product sets.|WITH [1,2,3] AS set1, [2,3,4] AS set2 WITH apoc.coll.intersection(set1, set2) AS common, apoc.coll.union(set1, set2) AS total RETURN toFloat(size(common)) / size(total) AS jaccardSimilarity
157|Match two customers who bought at least two same products at Uppsala in Feb 2023.|MATCH (o1:Order)-[:orderedBy]->(c1:Customer), (o2:Order)-[:orderedBy]->(c2:Customer), (o1)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product), (o2)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p), (o1)-[:PLACED_AT]->(s1:Store), (o2)-[:PLACED_AT]->(s2:Store) WHERE c1 <> c2 AND s1.storeName = 'Uppsala' AND s2.storeName = 'Uppsala' AND o1.orderDate >= date('2023-02-01') AND o1.orderDate <= date('2023-02-28') AND o2.orderDate >= date('2023-02-01') AND o2.orderDate <= date('2023-02-28') WITH c1, c2, count(DISTINCT p) AS sharedProducts WHERE sharedProducts > 1 RETURN c1.name, c2.name, sharedProducts
158|Return a sample shared product between two customers.|MATCH (c1:Customer)<-[:orderedBy]-(o1:Order)-[:includesOrderLine]->(:OrderLine)-[:refersToProduct]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o2:Order)-[:orderedBy]->(c2:Customer) WHERE c1 <> c2 RETURN c1.name, c2.name, head(collect(DISTINCT p.productName)) AS exampleSharedProduct
160|Find products that are frequently co-purchased with a given product.|MATCH (p:Product {productId: 'P123'})-[r:CO_PURCHASED_WITH]-(co:Product) RETURN co.productName, r.weight ORDER BY r.weight DESC
161|List all products and their co-purchased products with number of times co-purchased.|MATCH (p:Product)-[r:CO_PURCHASED_WITH]-(co:Product) RETURN p.productName, collect(co.productName) AS coProducts, collect(r.weight) AS weights
162|Get top 5 products with the highest PageRank score.|CALL gds.pageRank.stream('product-copurchase-graph') YIELD nodeId, score WITH gds.util.asNode(nodeId) AS p, score RETURN p.productName, round(score, 3) AS pageRankScore ORDER BY pageRankScore DESC LIMIT 5
163|Find co-purchased products for all products along with their PageRank scores.|CALL gds.pageRank.stream('product-copurchase-graph') YIELD nodeId, score WITH gds.util.asNode(nodeId) AS p, score OPTIONAL MATCH (p)-[r:CO_PURCHASED_WITH]-(co:Product) RETURN p.productName, round(score, 3) AS pageRankScore, collect(co.productName) AS coProducts
164|Find products that have more than 3 co-purchase relationships.|MATCH (p:Product)-[r:CO_PURCHASED_WITH]-(co:Product) WITH p, count(co) AS coCount WHERE coCount > 3 RETURN p.productName, coCount ORDER BY coCount DESC
165|Products with highest number of distinct co-purchases.|MATCH (p:Product)-[r:CO_PURCHASED_WITH]->(co:Product) WITH p, count(DISTINCT co) AS distinctCoPurchases RETURN p.productName, distinctCoPurchases ORDER BY distinctCoPurchases DESC LIMIT 10
166|Which products are hubs (connected to many other products)?|MATCH (p:Product)-[r:CO_PURCHASED_WITH]-(co:Product) WITH p, count(co) AS degree WHERE degree > 5 RETURN p.productName, degree ORDER BY degree DESC
167|Find products with PageRank score greater than 0.1.|CALL gds.pageRank.stream('product-copurchase-graph') YIELD nodeId, score WITH gds.util.asNode(nodeId) AS p, score WHERE score > 0.1 RETURN p.productName, round(score, 3) AS pageRankScore ORDER BY pageRankScore DESC
168|For a given product, find its top 3 most frequently co-purchased products.|MATCH (p:Product {productId: 'P456'})-[r:CO_PURCHASED_WITH]-(co:Product) RETURN co.productName, r.weight ORDER BY r.weight DESC LIMIT 3
169|Get all products with their co-purchase partners and PageRank scores for recommendation.|CALL gds.pageRank.stream('product-copurchase-graph') YIELD nodeId, score WITH gds.util.asNode(nodeId) AS p, score OPTIONAL MATCH (p)-[r:CO_PURCHASED_WITH]-(co:Product) RETURN p.productName, round(score, 3) AS pageRankScore, collect(co.productName) AS recommendedTogether
170|Find top 5 categories by total units sold at Stockholm store.|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'}) RETURN c.categoryName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits DESC LIMIT 5
171|List bottom 5 products by total units sold at Malmö store.|MATCH (p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Malmö'}) RETURN p.productName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits ASC LIMIT 5
172|Find total units sold per category at Uppsala store during Summer season.|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order {season: 'Summer'})-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) RETURN c.categoryName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits DESC
173|Products with the highest order quantities sold during Winter at Gothenburg.|MATCH (p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order {season: 'Winter'})-[:PLACED_AT]->(s:Store {storeName: 'Gothenburg'}) RETURN p.productName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits DESC LIMIT 10
174|Find total units sold for each category across all stores.|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store) RETURN c.categoryName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits DESC
175|Top 3 products with the least units sold at Uppsala store in Autumn.|MATCH (p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order {season: 'Autumn'})-[:PLACED_AT]->(s:Store {storeName: 'Uppsala'}) RETURN p.productName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits ASC LIMIT 3
176|Category with the lowest unit sales at Örebro store in February 2023.|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Örebro'}) WHERE o.orderDate >= date('2023-02-01') AND o.orderDate <= date('2023-02-28') RETURN c.categoryName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits ASC LIMIT 1
177|Find top 5 products by quantity sold across Stockholm and Malmö stores during Christmas.|MATCH (p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order {holiday: 'Christmas'})-[:PLACED_AT]->(s:Store) WHERE s.storeName IN ['Stockholm', 'Malmö'] RETURN p.productName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits DESC LIMIT 5
178|What are the top selling categories at Malmö store by quantity?|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Malmö'}) RETURN c.categoryName, sum(o.includesOrderLine.orderLineQuantity) AS totalUnits ORDER BY totalUnits DESC
179|Products that have zero unit sales at Gothenburg store in 2023.|MATCH (p:Product)<-[:refersToProduct]-(ol:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Gothenburg'}) WHERE o.orderDate >= date('2023-01-01') AND o.orderDate < date('2024-01-01') WITH p.productName AS productName, sum(ol.orderLineQuantity) AS totalUnits WHERE totalUnits = 0 RETURN productName
180|Find forecasted quantities for COS brand products.|MATCH (p:Product {brand: 'COS'})<-[:FORECASTS_PRODUCT]-(f:Forecast) RETURN p.productName, f.forecastQty
181|Products where actual sales exceeded forecast by more than 20%.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH p, sum(o.includesOrderLine.orderLineQuantity) AS actualSales, avg(f.forecastQty) AS forecasted WHERE actualSales > 1.2 * forecasted RETURN p.productName, actualSales, forecasted
182|Products where forecasted quantity was much higher than actual sales.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH p, sum(o.includesOrderLine.orderLineQuantity) AS actualSales, avg(f.forecastQty) AS forecasted WHERE actualSales < 0.8 * forecasted RETURN p.productName, actualSales, forecasted
183|Top 5 products with the largest positive variance in forecasts.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product) RETURN p.productName, f.variance ORDER BY f.variance DESC LIMIT 5
184|List forecasted quantities by category for Summer season products.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) WHERE f.forecastQty > 0 RETURN c.categoryName, sum(f.forecastQty) AS totalForecasted ORDER BY totalForecasted DESC
185|Forecast vs Actuals: compare forecasted vs sold units per category.|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:FORECASTS_PRODUCT]-(f:Forecast) OPTIONAL MATCH (p)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH c, sum(f.forecastQty) AS forecastedUnits, sum(o.includesOrderLine.orderLineQuantity) AS actualUnits RETURN c.categoryName, forecastedUnits, actualUnits
186|Find forecasted quantities for Red color products sold at Stockholm.|MATCH (p:Product {color: 'Red'})<-[:FORECASTS_PRODUCT]-(f:Forecast), (p)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'}) RETURN p.productName, sum(f.forecastQty) AS forecasted, sum(o.includesOrderLine.orderLineQuantity) AS actualSold
187|Forecasted quantity vs Actual quantity for each product at Malmö store.|MATCH (s:Store {storeName: 'Malmö'})<-[:PLACED_AT]-(o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product)<-[:FORECASTS_PRODUCT]-(f:Forecast) RETURN p.productName, sum(f.forecastQty) AS forecasted, sum(ol.orderLineQuantity) AS actualSold
188|Identify products that had forecasted quantities but zero sales.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product) OPTIONAL MATCH (p)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH p, f.forecastQty AS forecastQty, sum(o.includesOrderLine.orderLineQuantity) AS totalSold WHERE totalSold IS NULL OR totalSold = 0 RETURN p.productName, forecastQty
189|Forecast variance per category: which categories were most wrongly forecasted?|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) RETURN c.categoryName, avg(abs(f.variance)) AS avgVariance ORDER BY avgVariance DESC
190|Find forecasted quantities for COS brand products.|MATCH (p:Product {brand: 'COS'})<-[:FORECASTS_PRODUCT]-(f:Forecast) RETURN p.productName, f.forecastQty
191|Products where actual sales exceeded forecast by more than 20%.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH p, sum(o.includesOrderLine.orderLineQuantity) AS actualSales, avg(f.forecastQty) AS forecasted WHERE actualSales > 1.2 * forecasted RETURN p.productName, actualSales, forecasted
192|Products where forecasted quantity was much higher than actual sales.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH p, sum(o.includesOrderLine.orderLineQuantity) AS actualSales, avg(f.forecastQty) AS forecasted WHERE actualSales < 0.8 * forecasted RETURN p.productName, actualSales, forecasted
193|Top 5 products with the largest positive variance in forecasts.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product) RETURN p.productName, f.variance ORDER BY f.variance DESC LIMIT 5
194|List forecasted quantities by category for Summer season products.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) WHERE f.forecastQty > 0 RETURN c.categoryName, sum(f.forecastQty) AS totalForecasted ORDER BY totalForecasted DESC
195|Forecast vs Actuals: compare forecasted vs sold units per category.|MATCH (c:Category)<-[:BELONGS_TO_CATEGORY]-(p:Product)<-[:FORECASTS_PRODUCT]-(f:Forecast) OPTIONAL MATCH (p)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH c, sum(f.forecastQty) AS forecastedUnits, sum(o.includesOrderLine.orderLineQuantity) AS actualUnits RETURN c.categoryName, forecastedUnits, actualUnits
196|Find forecasted quantities for Red color products sold at Stockholm.|MATCH (p:Product {color: 'Red'})<-[:FORECASTS_PRODUCT]-(f:Forecast), (p)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order)-[:PLACED_AT]->(s:Store {storeName: 'Stockholm'}) RETURN p.productName, sum(f.forecastQty) AS forecasted, sum(o.includesOrderLine.orderLineQuantity) AS actualSold
197|Forecasted quantity vs Actual quantity for each product at Malmö store.|MATCH (s:Store {storeName: 'Malmö'})<-[:PLACED_AT]-(o:Order)-[:includesOrderLine]->(ol:OrderLine)-[:refersToProduct]->(p:Product)<-[:FORECASTS_PRODUCT]-(f:Forecast) RETURN p.productName, sum(f.forecastQty) AS forecasted, sum(ol.orderLineQuantity) AS actualSold
198|Identify products that had forecasted quantities but zero sales.|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product) OPTIONAL MATCH (p)<-[:refersToProduct]-(:OrderLine)<-[:includesOrderLine]-(o:Order) WITH p, f.forecastQty AS forecastQty, sum(o.includesOrderLine.orderLineQuantity) AS totalSold WHERE totalSold IS NULL OR totalSold = 0 RETURN p.productName, forecastQty
199|Forecast variance per category: which categories were most wrongly forecasted?|MATCH (f:Forecast)-[:FORECASTS_PRODUCT]->(p:Product)-[:BELONGS_TO_CATEGORY]->(c:Category) RETURN c.categoryName, avg(abs(f.variance)) AS avgVariance ORDER BY avgVariance DESC