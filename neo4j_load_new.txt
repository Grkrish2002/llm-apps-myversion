import argparse
import hashlib
import logging
import time
from neo4j import GraphDatabase, basic_auth
from tqdm import tqdm

# --- Config Logging ---
logging.basicConfig(filename="cypher_loader.log", level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# --- Helper Functions ---
def hash_statement(statement):
    return hashlib.md5(statement.encode("utf-8")).hexdigest()

def load_hashes(filepath):
    try:
        with open(filepath, "r") as f:
            return set(line.strip() for line in f.readlines())
    except FileNotFoundError:
        return set()

def save_hash(hash_value, filepath):
    with open(filepath, "a") as f:
        f.write(hash_value + "\n")

# --- Main Loader ---
def load_cypher_statements(uri, user, password, input_file, hash_file, batch_size):
    driver = GraphDatabase.driver(uri, auth=basic_auth(user, password))
    all_statements = []

    with open(input_file, "r", encoding="utf-8") as f:
        raw = f.read()
        all_statements = [s.strip() for s in raw.split(";") if s.strip()]

    logged_hashes = load_hashes(hash_file)

    logging.info(f"🚀 Starting load. Total statements: {len(all_statements)}")
    with driver.session() as session:
        for i in tqdm(range(0, len(all_statements), batch_size)):
            batch = all_statements[i:i + batch_size]
            for stmt in batch:
                stmt_hash = hash_statement(stmt)
                if stmt_hash in logged_hashes:
                    continue
                success = False
                retries = 0
                while not success and retries < 3:
                    try:
                        session.run(stmt)
                        save_hash(stmt_hash, hash_file)
                        success = True
                    except Exception as e:
                        retries += 1
                        wait = 2 ** retries
                        logging.error(f"❌ Failed: {stmt[:80]}... Retrying in {wait}s. Error: {str(e)}")
                        time.sleep(wait)
    logging.info("✅ Cypher load complete.")

# --- CLI Args ---
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Neo4j Cypher batch loader")
    parser.add_argument("--file", type=str, required=True, help="Path to .cypher file")
    parser.add_argument("--batch_size", type=int, default=10, help="Batch size for Cypher execution")
    parser.add_argument("--uri", type=str, default="bolt://localhost:7687", help="Neo4j Bolt URI")
    parser.add_argument("--user", type=str, default="neo4j", help="Neo4j username")
    parser.add_argument("--password", type=str, default="Pes01@1981", help="Neo4j password")
    parser.add_argument("--hash_log", type=str, default="loaded_hashes.log", help="File to track loaded statements")
    args = parser.parse_args()

    load_cypher_statements(
        uri=args.uri,
        user=args.user,
        password=args.password,
        input_file=args.file,
        hash_file=args.hash_log,
        batch_size=args.batch_size
    )
